<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Taskcat Workshop on taskcat workshop</title><link>/</link><description>Recent content in Taskcat Workshop on taskcat workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy CI/CD pipeline</title><link>/40_lab4/10_page.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/40_lab4/10_page.html</guid><description>To setup a CICD pipeline for your project, you need the following details. Make a note of the following before proceeding with the rest of the steps: -
Your AWS Code Commit repository name Your AWS Code Commit repository Url (https://) Source branch name, where you will be pushing your changes Release branch name, where your changes needs to be promoted, after successfull test Create stack To create a CICD pipeline, you will launch a CloudFormation template.</description></item><item><title>Lab Enviornment</title><link>/10_lab1/10_page1.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/10_page1.html</guid><description> Lab information The AWS Appstream seesion that you are using for this hands on lab has the follow programs pre-installed:
Python3 (taskcat is Python program) taskcat (pip install taskcat) Docker (Used for lambda packaging) Vscode (With taskcat schemea validation enabled)</description></item><item><title>Build .taskcat.yml</title><link>/10_lab1/20_page2.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/20_page2.html</guid><description> What you will do in this lab: Open the .taskcat.yml in lab_assets/start/lab1/cfn_project
Note scheme validation is plugged into vscode</description></item><item><title>Make changes locally</title><link>/40_lab4/20_page.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/40_lab4/20_page.html</guid><description>Now, once you have a CICD pipeline setup for your project, let&amp;rsquo;s see it in-action.
Make changes to your code Let&amp;rsquo;s make few changes to the code.
[TODO:List-of-changes-to-make]
Stage your changes git add . and commit it git commit -m &amp;quot;make some changes&amp;quot;.</description></item><item><title>Add a project section</title><link>/10_lab1/30_page3.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/30_page3.html</guid><description> Add a project section for the value of name: specify the name of the project folder
project: name: cfn-project</description></item><item><title>Code push, test and promote</title><link>/40_lab4/30_page.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/40_lab4/30_page.html</guid><description>Push changes to remote repository After you have commited your changes locally, it&amp;rsquo;s time to push it to the remote repository. Run git push to push your changes.
Test execution and code promotion Now, go to your AWS Code Pipeline console, click your pipeline, and you should see the Source action in-progress. After the Source action is completed successfully, Build action will start.
[TODO:Screenshot]
Build action uses AWS CodeBuild to run tests (as defined in your project configuration file) using TaskCat.</description></item><item><title>Add a test section</title><link>/10_lab1/40_page4.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/40_page4.html</guid><description> Add a test section define a test mytest
specfiy the name of your template: lab1.template.yaml
define the region: you want to test (for now just specifiy one) us-east-1
add the parameters: this template does not require any parameters so just {} (to specify no params)
tests: mytest: template: templates/lab1.template.yaml regions: - us-east-1 parameters: {}</description></item><item><title>Add inputs to your test</title><link>/10_lab1/50_page5.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/50_page5.html</guid><description>Add a parameter section to the test define a test mytest
specfiy the name of your template: lab1.template.yaml
define the region: you want to test (for now just specifiy one) us-east-1
add the parameters: set the value of S3BucketName to $[taskcat_autobucket] This will evaulate to the bucket that taskcat creates during execution
Hint: Parameter vaules can be dynamically passed to a stack during creation when testing with taskcat.</description></item><item><title>Execute a taskcat test</title><link>/10_lab1/60_page6.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/60_page6.html</guid><description> Start a test From you vsode terminal change directory to you project root for lab1 (lab_assets/start/lab1/cfn-project)
Under cfn-project you will see the following files
cfn-project ├── lambda_functions ├── templates └── .taskcat.yml From the cfn-project dir run you taskcat testa
taskcat test run Expected output:</description></item><item><title>View test results</title><link>/10_lab1/70_page7.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/10_lab1/70_page7.html</guid><description>Test Results After the test completes you will see a new folder under cfn-project called taskcat_outputs
cfn-project ├── lambda_functions ├── templates ├── .taskcat.yml └── taskcat_outputs/index.html &amp;lt; - (report) open taskcat_outputs/index.html in the your web browser To see the test logs click the View Logs link</description></item><item><title/><link>/lab_assets/start/lab1/cfn-project/lambda_functions/source/genrandom/certifi-2019.9.11.dist-info/description.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/lab_assets/start/lab1/cfn-project/lambda_functions/source/genrandom/certifi-2019.9.11.dist-info/description.html</guid><description>Certifi: Python SSL Certificates Certifi is a carefully curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. It has been extracted from the Requests project.
Installation certifi is available on PyPI. Simply install it with pip:
$ pip install certifi Usage To reference the installed certificate authority (CA) bundle, you can use the built-in function:
&amp;gt;&amp;gt;&amp;gt; import certifi &amp;gt;&amp;gt;&amp;gt; certifi.</description></item><item><title/><link>/lab_assets/start/lab1/cfn-project/lambda_functions/source/genrandom/chardet-3.0.4.dist-info/description.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/lab_assets/start/lab1/cfn-project/lambda_functions/source/genrandom/chardet-3.0.4.dist-info/description.html</guid><description>Chardet: The Universal Character Encoding Detector Build status https://img.shields.io/coveralls/chardet/chardet/stable.svg Latest version on PyPI License Detects ASCII, UTF-8, UTF-16 (2 variants), UTF-32 (4 variants) Big5, GB2312, EUC-TW, HZ-GB-2312, ISO-2022-CN (Traditional and Simplified Chinese) EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP (Japanese) EUC-KR, ISO-2022-KR (Korean) KOI8-R, MacCyrillic, IBM855, IBM866, ISO-8859-5, windows-1251 (Cyrillic) ISO-8859-5, windows-1251 (Bulgarian) ISO-8859-1, windows-1252 (Western European languages) ISO-8859-7, windows-1253 (Greek) ISO-8859-8, windows-1255 (Visual and Logical Hebrew) TIS-620 (Thai) Note</description></item><item><title/><link>/lab_assets/start/lab1/cfn-project/lambda_functions/source/genrandom/idna-2.8.dist-info/license.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/lab_assets/start/lab1/cfn-project/lambda_functions/source/genrandom/idna-2.8.dist-info/license.html</guid><description>License Copyright (c) 2013-2018, Kim Davies. All rights reserved.
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</description></item></channel></rss>