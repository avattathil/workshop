[{"uri":"/","title":"Taskcat Workshop","tags":[],"description":"","content":" taskcat workshop Whether authoring an AWS Quick Start or building an AWS Marketplace template to deploy your product on AWS, having confidence that your AWS CloudFormation templates are the best possible quality is key to wowing your customers. Learn to develop templates that are reliable, best practice, and portable across regions. In this workshop, we cover AWS CloudFormation best practices, tips on authoring AAA templates, and hands-on building of a CI/CD pipeline to validate templates before they are published.\nWhat you will learn  Using taskcat in your development environment to increase velocity while improving quality Some best practices for building highly portable and durable CloudFormation templates Using taskcat in a CI/CD workflow to ensure quality of releases  Architecture # TODO\n"},{"uri":"/00_lab0.html","title":"Prerequisites","tags":[],"description":"","content":" Prerequisites for the Workshop  What you will need to get started! You will be porovided taskcat Workshop-Hash: b76bbe879be74e988678bb4a831365f3\nOpen a webrowser and navigate to https://dashboard.eventengine.run/\nEnter the Workshop-Hash to proceed\n"},{"uri":"/40_lab4/10_page.html","title":"Deploy CI/CD pipeline","tags":[],"description":"","content":" To setup a CICD pipeline for your project, you need the following details. Make a note of the following before proceeding with the rest of the steps: -\n Your AWS Code Commit repository name Your AWS Code Commit repository Url (https://) Source branch name, where you will be pushing your changes Release branch name, where your changes needs to be promoted, after successfull test  Create stack To create a CICD pipeline, you will launch a CloudFormation template.\nClick [TODO:LauchStack-button].\nThis will open a CloudFormation console in a new tab in your browser, with CloudFormation template S3 path pre-populated.\n[TODO:Screenshot]\nClick Next, and fill in the parameter values. Use the values you made a note of, earlier. Leave default values for Quick Start S3 Bucket Name and Quick Start S3 Key Prefix parameters.\nAfter you have provided all the parameter values, your page should look like below.\n[TODO:Screenshot]\nClick Next, and Next again.\nOn the Review parameters page, scroll down, select the checkboxes for IAM_CAPABILITIES and click Next.\nClick Create.\nThis will start the stack creation. It will take approximately 5 mins to finish.\n[TODO:Scrrenshot]\nView CICD pipeline After the stack creation is completed successfully, click the Outputs tab and look for CodePipelineURL.\n[TODO:Screenshot]\nPress Ctrl Key in your keyboard and click the CodePipelineUrl. This will open the AWS Code Pipeline console in a new tab on your browser, and you should see a pipeline.\n[TODO:Screenshot]\nNote: You may see that either the Source action or the Build action is in-progress. This is because, when the code pipeline is created for the first time, it automatically gets triggered. But don\u0026rsquo;t worry, in the next section we will see the full workflow in-action, starting from making a commit locally, pushing the changes to the code commit reposirotry, and seeing the pipeline being triggered, which then runs the tests and promotes the changes to the release branch, on successfull test.\n"},{"uri":"/10_lab1.html","title":"Lab 1","tags":[],"description":"","content":" What you will do in this lab: Using the provided clouformation template build a taskcat config\nFrom the vscode file browser navigate to the lab_assets/start/lab1/, In lab_assets you will see a cfn_project folder\nWe will build out lab1 in this folder!\n Hint: Consider cfn_project as the root of your Cloudformation project\n Browse to the templates directory with in cfn_project and inspect lab1.template.yaml and taskcat.yml (Double click on the file to open them in the ide tabs)\n"},{"uri":"/10_lab1/20_page2.html","title":"Build .taskcat.yml","tags":[],"description":"","content":" What you will do in this lab: Open the .taskcat.yml in lab_assets/start/lab1/cfn_project\n Note scheme validation is plugged into vscode\n "},{"uri":"/20_lab2.html","title":"Lab 2","tags":[],"description":"","content":" Building a basic cfn template Lets start by build a basic template that creates an s3 bucket\n"},{"uri":"/40_lab4/20_page.html","title":"Make changes locally","tags":[],"description":"","content":" Now, once you have a CICD pipeline setup for your project, let\u0026rsquo;s see it in-action.\nMake changes to your code Let\u0026rsquo;s make few changes to the code.\n[TODO:List-of-changes-to-make]\nStage your changes git add . and commit it git commit -m \u0026quot;make some changes\u0026quot;.\n"},{"uri":"/10_lab1/30_page3.html","title":"Add a project section","tags":[],"description":"","content":" Add a project section for the value of name: specify the name of the project folder\nproject: name: cfn-project  "},{"uri":"/40_lab4/30_page.html","title":"Code push, test and promote","tags":[],"description":"","content":" Push changes to remote repository After you have commited your changes locally, it\u0026rsquo;s time to push it to the remote repository. Run git push to push your changes.\nTest execution and code promotion Now, go to your AWS Code Pipeline console, click your pipeline, and you should see the Source action in-progress. After the Source action is completed successfully, Build action will start.\n[TODO:Screenshot]\nBuild action uses AWS CodeBuild to run tests (as defined in your project configuration file) using TaskCat. After all the tests are completed successfully, the source branch (where the changes were commited) is merged into the release/target branch.\n[TODO:Screenshot]\n"},{"uri":"/30_lab3.html","title":"Lab 3","tags":[],"description":"","content":" Building a basic cfn template Lets start by build a basic template that creates an s3 bucket\n"},{"uri":"/10_lab1/40_page4.html","title":"Add a test section","tags":[],"description":"","content":" Add a test section  define a test mytest\n specfiy the name of your template: lab1.template.yaml\n define the region: you want to test (for now just specifiy one) us-east-1\n add the parameters: this template does not require any parameters so just {} (to specify no params)\ntests: mytest: template: templates/lab1.template.yaml regions: - us-east-1 parameters: {}   "},{"uri":"/40_lab4.html","title":"Lab 4","tags":[],"description":"","content":" Setup CICD pipeline for your project In this lab, you will learn how to do continuous integration of your CloudFormation templates, by creating a CI/CD pipeline for your project.\nFollowing diagram shows what you will deploy in this lab. [TODO:Architecture-diagram-of-CI/CD-pipeline]\nThe CI/CD pipeline uses AWS Codepipeline and AWS Code Build services. AWS Codepipeline has a source action for AWS Code commit repository, and a build action uses AWS Code Build to run tests. The Code Build runs TaskCat to perform the tests, similar to how you run TaskCat locally on your laptop.\nAfter you have set-up a CI/CD pipeline for your project, next time you push any changes to your git repository, it will trigger the pipeline. This will run the tests you have defined in your project configuration file, and on successfull test, the changes will be promoted from source branch to the target/release branch.\nSo, let\u0026rsquo;s get started with setting-up a CICD pipeline.\n"},{"uri":"/10_lab1/50_page5.html","title":"Add inputs to your test ","tags":[],"description":"","content":" Add a parameter section to the test  define a test mytest\n specfiy the name of your template: lab1.template.yaml\n define the region: you want to test (for now just specifiy one) us-east-1\n add the parameters: set the value of S3BucketName to $[taskcat_autobucket] This will evaulate to the bucket that taskcat creates during execution\n   Hint: Parameter vaules can be dynamically passed to a stack during creation when testing with taskcat. For example: By specifing $[taskcat_autobucket] as the value of S3BucketName we can instruct taskcat to replace value with the name of the bucket that will be created at runtime\n tests: mytest: template: templates/lab1.template.yaml regions: - us-east-1 parameters: S3BucketName: '$[taskcat_autobucket]'  "},{"uri":"/50_lab5.html","title":"Lab 5","tags":[],"description":"","content":" Building a basic cfn template Lets start by build a basic template that creates an s3 bucket\n"},{"uri":"/10_lab1/60_page6.html","title":"Execute a taskcat test","tags":[],"description":"","content":" Start a test From you vsode terminal change directory to you project root for lab1 (lab_assets/start/lab1/cfn-project)\nUnder cfn-project you will see the following files\ncfn-project ├── lambda_functions ├── templates └── .taskcat.yml  From the cfn-project dir run you taskcat testa\ntaskcat test run  Expected output: "},{"uri":"/lab_assets/start/lab1/cfn-project/lambda_functions/source/genrandom/certifi-2019.9.11.dist-info/description.html","title":"","tags":[],"description":"","content":"Certifi: Python SSL Certificates Certifi is a carefully curated collection of Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts. It has been extracted from the Requests project.\nInstallation certifi is available on PyPI. Simply install it with pip:\n$ pip install certifi   Usage To reference the installed certificate authority (CA) bundle, you can use the built-in function:\n\u0026gt;\u0026gt;\u0026gt; import certifi \u0026gt;\u0026gt;\u0026gt; certifi.where() '/usr/local/lib/python2.7/site-packages/certifi/cacert.pem'  Or from the command line:\n$ python -m certifi /usr/local/lib/python2.7/site-packages/certifi/cacert.pem  Enjoy!\n1024-bit Root Certificates Browsers and certificate authorities have concluded that 1024-bit keys are unacceptably weak for certificates, particularly root certificates. For this reason, Mozilla has removed any weak (i.e. 1024-bit key) certificate from its bundle, replacing it with an equivalent strong (i.e. 2048-bit or greater key) certificate from the same CA. Because Mozilla removed these certificates from its bundle, certifi removed them as well.\nIn previous versions, certifi provided the certifi.old_where() function to intentionally re-add the 1024-bit roots back into your bundle. This was not recommended in production and therefore was removed at the end of 2018.\n  "},{"uri":"/lab_assets/start/lab1/cfn-project/lambda_functions/source/genrandom/chardet-3.0.4.dist-info/description.html","title":"","tags":[],"description":"","content":"Chardet: The Universal Character Encoding Detector Build status https://img.shields.io/coveralls/chardet/chardet/stable.svg Latest version on PyPI License Detects ASCII, UTF-8, UTF-16 (2 variants), UTF-32 (4 variants) Big5, GB2312, EUC-TW, HZ-GB-2312, ISO-2022-CN (Traditional and Simplified Chinese) EUC-JP, SHIFT_JIS, CP932, ISO-2022-JP (Japanese) EUC-KR, ISO-2022-KR (Korean) KOI8-R, MacCyrillic, IBM855, IBM866, ISO-8859-5, windows-1251 (Cyrillic) ISO-8859-5, windows-1251 (Bulgarian) ISO-8859-1, windows-1252 (Western European languages) ISO-8859-7, windows-1253 (Greek) ISO-8859-8, windows-1255 (Visual and Logical Hebrew) TIS-620 (Thai)    Note\nOur ISO-8859-2 and windows-1250 (Hungarian) probers have been temporarily disabled until we can retrain the models.\n Requires Python 2.6, 2.7, or 3.3+.\n Installation Install from PyPI:\npip install chardet   Documentation For users, docs are now available at https://chardet.readthedocs.io/.\n Command-line Tool chardet comes with a command-line script which reports on the encodings of one or more files:\n% chardetect somefile someotherfile somefile: windows-1252 with confidence 0.5 someotherfile: ascii with confidence 1.0   About This is a continuation of Mark Pilgrim's excellent chardet. Previously, two versions needed to be maintained: one that supported python 2.x and one that supported python 3.x. We've recently merged with Ian Cordasco's charade fork, so now we have one coherent version that works for Python 2.6+.\nmaintainer:Dan Blanchard     "},{"uri":"/lab_assets/start/lab1/cfn-project/lambda_functions/source/genrandom/idna-2.8.dist-info/license.html","title":"","tags":[],"description":"","content":"License Copyright (c) 2013-2018, Kim Davies. All rights reserved.\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of the contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE CONTRIBUTORS \u0026quot;AS IS\u0026quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  Portions of the codec implementation and unit tests are derived from the Python standard library, which carries the Python Software Foundation License:\n Copyright (c) 2001-2014 Python Software Foundation; All Rights Reserved Portions of the unit tests are derived from the Unicode standard, which is subject to the Unicode, Inc. License Agreement:\n Copyright (c) 1991-2014 Unicode, Inc. All rights reserved. Distributed under the Terms of Use in \u0026lt;http://www.unicode.org/copyright.html\u0026gt;.\nPermission is hereby granted, free of charge, to any person obtaining a copy of the Unicode data files and any associated documentation (the \u0026quot;Data Files\u0026quot;) or Unicode software and any associated documentation (the \u0026quot;Software\u0026quot;) to deal in the Data Files or Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, and/or sell copies of the Data Files or Software, and to permit persons to whom the Data Files or Software are furnished to do so, provided that\n(a) this copyright and permission notice appear with all copies of the Data Files or Software,\n(b) this copyright and permission notice appear in associated documentation, and\n(c) there is clear notice in each modified Data File or in the Software as well as in the documentation associated with the Data File(s) or Software that the data or software has been modified.\nTHE DATA FILES AND SOFTWARE ARE PROVIDED \u0026quot;AS IS\u0026quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THE DATA FILES OR SOFTWARE.\nExcept as contained in this notice, the name of a copyright holder shall not be used in advertising or otherwise to promote the sale, use or other dealings in these Data Files or Software without prior written authorization of the copyright holder.\n "},{"uri":"/categories.html","title":"Categories","tags":[],"description":"","content":""},{"uri":"/lab_assets.html","title":"Lab_assets","tags":[],"description":"","content":""},{"uri":"/tags.html","title":"Tags","tags":[],"description":"","content":""}]